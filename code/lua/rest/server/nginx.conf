# OpenResty/nginx configuration for Lua REST API
# This is an alternative implementation using OpenResty

worker_processes 1;
error_log logs/error.log info;

events {
    worker_connections 1024;
}

http {
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";
    lua_shared_dict tasks 10m;
    
    init_by_lua_block {
        local cjson = require "cjson"
        
        -- Initialize with sample data
        local tasks = ngx.shared.tasks
        
        local task1 = {
            id = "task1",
            title = "Implement Lua REST API",
            description = "Build a REST API server using OpenResty",
            status = "in_progress",
            priority = "high",
            tags = {"lua", "rest", "api"},
            assigned_to = "backend-team",
            created_at = ngx.now(),
            updated_at = ngx.now()
        }
        tasks:set("task1", cjson.encode(task1))
        
        local task2 = {
            id = "task2",
            title = "Add Redis support",
            description = "Implement Redis-based persistence",
            status = "pending",
            priority = "medium",
            tags = {"lua", "redis", "database"},
            assigned_to = "backend-team",
            created_at = ngx.now(),
            updated_at = ngx.now()
        }
        tasks:set("task2", cjson.encode(task2))
    }
    
    server {
        listen 8080;
        server_name localhost;
        
        default_type application/json;
        
        # Enable CORS
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type' always;
        
        # Health check
        location = /health {
            content_by_lua_block {
                local cjson = require "cjson"
                local tasks = ngx.shared.tasks
                local keys = tasks:get_keys()
                
                ngx.say(cjson.encode({
                    status = "healthy",
                    service = "lua-openresty-api",
                    task_count = #keys
                }))
            }
        }
        
        # List all tasks
        location = /api/tasks {
            content_by_lua_block {
                local cjson = require "cjson"
                local tasks = ngx.shared.tasks
                
                if ngx.req.get_method() == "GET" then
                    local keys = tasks:get_keys()
                    local result = {}
                    
                    for _, key in ipairs(keys) do
                        local task_json = tasks:get(key)
                        if task_json then
                            local task = cjson.decode(task_json)
                            table.insert(result, task)
                        end
                    end
                    
                    ngx.say(cjson.encode({
                        tasks = result,
                        total_count = #result,
                        page_size = 20,
                        next_page_token = nil
                    }))
                    
                elseif ngx.req.get_method() == "POST" then
                    ngx.req.read_body()
                    local body = ngx.req.get_body_data()
                    
                    if not body then
                        ngx.status = 400
                        ngx.say(cjson.encode({error = "Request body required"}))
                        return
                    end
                    
                    local ok, data = pcall(cjson.decode, body)
                    if not ok or not data.title then
                        ngx.status = 400
                        ngx.say(cjson.encode({error = "Title is required"}))
                        return
                    end
                    
                    -- Generate UUID (simplified)
                    local id = "task_" .. ngx.now() .. "_" .. math.random(10000)
                    
                    local task = {
                        id = id,
                        title = data.title,
                        description = data.description or "",
                        status = data.status or "pending",
                        priority = data.priority or "medium",
                        tags = data.tags or {},
                        assigned_to = data.assigned_to or "",
                        created_at = ngx.now(),
                        updated_at = ngx.now()
                    }
                    
                    tasks:set(id, cjson.encode(task))
                    ngx.status = 201
                    ngx.say(cjson.encode(task))
                    
                elseif ngx.req.get_method() == "OPTIONS" then
                    ngx.status = 204
                    return
                    
                else
                    ngx.status = 405
                    ngx.say(cjson.encode({error = "Method not allowed"}))
                end
            }
        }
        
        # Get, Update, Delete specific task
        location ~ ^/api/tasks/([^/]+)$ {
            content_by_lua_block {
                local cjson = require "cjson"
                local tasks = ngx.shared.tasks
                local task_id = ngx.var[1]
                local method = ngx.req.get_method()
                
                if method == "GET" then
                    local task_json = tasks:get(task_id)
                    if task_json then
                        ngx.say(task_json)
                    else
                        ngx.status = 404
                        ngx.say(cjson.encode({error = "Task not found"}))
                    end
                    
                elseif method == "PUT" then
                    local task_json = tasks:get(task_id)
                    if not task_json then
                        ngx.status = 404
                        ngx.say(cjson.encode({error = "Task not found"}))
                        return
                    end
                    
                    ngx.req.read_body()
                    local body = ngx.req.get_body_data()
                    if not body then
                        ngx.status = 400
                        ngx.say(cjson.encode({error = "Request body required"}))
                        return
                    end
                    
                    local ok, updates = pcall(cjson.decode, body)
                    if not ok then
                        ngx.status = 400
                        ngx.say(cjson.encode({error = "Invalid JSON"}))
                        return
                    end
                    
                    local task = cjson.decode(task_json)
                    
                    if updates.title then task.title = updates.title end
                    if updates.description then task.description = updates.description end
                    if updates.status then task.status = updates.status end
                    if updates.priority then task.priority = updates.priority end
                    if updates.tags then task.tags = updates.tags end
                    if updates.assigned_to then task.assigned_to = updates.assigned_to end
                    task.updated_at = ngx.now()
                    
                    tasks:set(task_id, cjson.encode(task))
                    ngx.say(cjson.encode(task))
                    
                elseif method == "DELETE" then
                    local deleted = tasks:delete(task_id)
                    if deleted then
                        ngx.status = 204
                    else
                        ngx.status = 404
                        ngx.say(cjson.encode({error = "Task not found"}))
                    end
                    
                elseif method == "OPTIONS" then
                    ngx.status = 204
                    return
                    
                else
                    ngx.status = 405
                    ngx.say(cjson.encode({error = "Method not allowed"}))
                end
            }
        }
        
        # Update task status
        location ~ ^/api/tasks/([^/]+)/status$ {
            content_by_lua_block {
                local cjson = require "cjson"
                local tasks = ngx.shared.tasks
                local task_id = ngx.var[1]
                local method = ngx.req.get_method()
                
                if method == "PATCH" then
                    local task_json = tasks:get(task_id)
                    if not task_json then
                        ngx.status = 404
                        ngx.say(cjson.encode({error = "Task not found"}))
                        return
                    end
                    
                    ngx.req.read_body()
                    local body = ngx.req.get_body_data()
                    if not body then
                        ngx.status = 400
                        ngx.say(cjson.encode({error = "Request body required"}))
                        return
                    end
                    
                    local ok, data = pcall(cjson.decode, body)
                    if not ok or not data.status then
                        ngx.status = 400
                        ngx.say(cjson.encode({error = "Status is required"}))
                        return
                    end
                    
                    local task = cjson.decode(task_json)
                    task.status = data.status
                    task.updated_at = ngx.now()
                    
                    tasks:set(task_id, cjson.encode(task))
                    ngx.say(cjson.encode(task))
                    
                elseif method == "OPTIONS" then
                    ngx.status = 204
                    return
                    
                else
                    ngx.status = 405
                    ngx.say(cjson.encode({error = "Method not allowed"}))
                end
            }
        }
    }
}